(import-from "stl/unittest" 
    test
    test-suite
    assert-not
    assert-eq
    assert-type
    assert-equal
    assert-raise)

(test-suite "lang"
    (test "asserting false things raises"
        (assert-raise (assert false)))

    (test "not true is false"
        (assert-equal true (not false)))

    (test "string is string" 
        (assert-type "foo" string))

    (test "nil is nil"
        (assert-eq () (list)))

    (test "true is true"
        (assert-eq (not false) (not false)))

    (test "list is pair"
        (assert (pair? (list 1 2 3))))

    (test "pair is pair"
        (assert (pair? (cons 1 2))))

    (test "list is list"
        (assert (list? (list 1 2 3))))

    (test "pair is not list"
        (assert-not (list? (cons 1 2))))

    (test "let bindings"
        (assert-equal 110
            (let x 100
            (let y 10
                (+ x y)))))

    (test "set! unbound raises error"
        (assert-raise (set! unbound)))

    (test "set! changes local binding"
        (assert-equal 7 (
            let x 0
                (set! x 7)
                x)))

    (test "eval a quoted sexpr" 
        (assert (eval (quote (eq? nil nil)))))

    (test "apply"
        (assert-equal 6 (apply + (list 1 2 3))))

    (test "map"
        (assert-equal
            (list 2 4 6)
            (map (fn (x) (* 2 x)) (list 1 2 3))))

    (test "fold"
        (assert-equal
            (list 4 3 2 1)
            (fold cons () (list 1 2 3 4))))

    (defn varia-car (x . xs) x)

    (defn varia-cdr (x . xs) xs)

    (defn varia-list (. xs) xs)

    (test "variadic parameters 1"
        (assert-equal (varia-car 1 2 3) 1))

    (test "variadic parameters 2"
        (assert-equal (varia-cdr 1 2 3) (list 2 3)))

    (test "variadic parameters 3"
        (assert-equal (varia-cdr 1) ()))

    (test "variadic parameters 4"
        (assert-equal (varia-list 1 2 3) (list 1 2 3)))

    (defn varia-let () (let x 12 "no-bueno" x))

    (test "variadic let"
        (assert-equal (varia-let) 12)))
