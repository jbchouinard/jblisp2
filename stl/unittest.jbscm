(def ok-count 0)
(def failed-count 0)

(def test-verbose
    (try
        (equal? "1" (getenv "TEST_VERBOSE"))
        false))

(defn assert-not (x) (assert (not x)))

(defn assert-eq (x y)
    (assert-msg (eq? x y)
        (concat (repr x) " is not the same as " (repr y))))

(defn assert-equal (x y)
    (assert-msg (equal? x y)
        (concat (repr x) " is not equal to " (repr y))))

(defn assert-type (val t)
    (assert-msg (type? val t)
        (concat (repr val) " is not of type " (repr t))))

(defmacro assert-raise (code)
    (let errnoraise (error "did not raise an error")
        (list try
            (list begin
                code
                (list raise errnoraise))
            (list if (list equal? 'err errnoraise) (list raise errnoraise) ()))))

(defmacro test (name code)
    (list try
        (list begin
            code
            (list set! 'ok-count (list + ok-count 1))
            (list if test-verbose
                (list print (list concat name ": ok")) ()))
        (list begin
            (list set! 'failed-count (list + failed-count 1))
            (list print (list concat name ": failed (" (list repr 'err) ")")) ())))

(defn test-start (name)
    (print (concat "Testing " name "..."))
    (set! ok-count 0)
    (set! failed-count 0))

(defn test-exit ()
    (print (concat
        "Test results: "
        (repr ok-count)
        " ok, "
        (repr failed-count)
        " failed"))
    (if (equal? failed-count 0) () (raise (error "Some tests failed."))))

(defmacro test-suite (name . tests)
    (list begin
        (list test-start name)
        (cons begin tests)
        (list test-exit)))
