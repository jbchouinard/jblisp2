(defn sign (x) (cond
    ((> x 0) (/ x x))
    ((< x 0) (- (/ x x)))
    (else (- x x))))

(defn abs (x) (* x (sign x)))

(defn sum (lst) (apply + lst))

(defn product (lst) (apply * lst))

(defn min (x y) (if (< x y) x y))

(defn max (x y) (if (> x y) x y))

(defn factorial (n) (fold * 1 (range 1 n)))

(defn remainder (x y)
    (- x (* y (/ x y))))

(defn even? (x)
    (equal? 0 (remainder (/ x 1) 2)))

(defn odd? (x)
    (not (even? x)))

(defn pow (x y)
    (cond
        ((< y 1) 1)
        ((even? y) (pow (* x x) (/ y 2)))
        (else (* x (pow x (- y 1))))))
