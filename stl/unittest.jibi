(def ok-count 0)
(def failed-count 0)

(defn inc-failed () (set! failed-count (+ 1 failed-count)))
(defn inc-ok () (set! ok-count (+ 1 ok-count)))

(def test-verbose
    (try
        (equal? "1" (getenv "TEST_VERBOSE"))
        false))

(defn assert-not (x) (assert (not x)))

(defn assert-eq (x y)
    (assert-msg (eq? x y)
        (concat (repr x) " is not the same as " (repr y))))

(defn assert-equal (x y)
    (assert-msg (equal? x y)
        (concat (repr x) " is not equal to " (repr y))))

(defmacro assert-type (val t)
    `(assert-msg (type? ,val ,t)
        ,(concat (repr val) " is not of type " (repr t))))

(defmacro assert-raise (code)
    (let ((errnoraise (exception "did not raise an error")))
        `(try
            (begin
                ,code
                (raise errnoraise))
            (and (equal? err ,errnoraise)
                (raise errnoraise)))))

(defmacro test (name . exprs)
    `(try
        (begin
            ,@exprs
            (,inc-ok)
            (and ,test-verbose
                (print (concat "Test " ,name ": ok"))))
        (begin
            (,inc-failed)
            (print (concat "Test " ,name ": failed " (repr err))))))

(defn test-start (name)
    (print (concat "Testing " name "..."))
    (set! ok-count 0)
    (set! failed-count 0))

(defn test-exit ()
    (print (concat
        "Test results: "
        (repr ok-count)
        " ok, "
        (repr failed-count)
        " failed"))
    (if (equal? failed-count 0) () (raise (exception "Some tests failed."))))

(defmacro test-suite (name . tests)
    `(begin
        (,test-start ,name)
        ,@tests
        (,test-exit)))
