(def nil ())
(def true (eq? nil nil))
(def false (not true))
(def else true)

(def inf (/ 0.0))
(def -inf (/ -0.0))
(def nan (/ 0.0 0.0))

(def defmacro
    (macro (name params . exprs)
        `(def ,name (nmacro ,(repr name) ,params ,@exprs))))

(defmacro defn (name params . exprs)
    `(def ,name (nfn ,(repr name) ,params ,@exprs)))

(defmacro setglobal! (name expr)
    `(env-set! (env-globals) (quote ,name) ,expr))

(defmacro defglobal (name expr)
    `(env-def (env-globals) (quote ,name) ,expr))

(defmacro defnglobal (name params . exprs)
    `(defglobal ,name (nfn ,(repr name) ,params ,@exprs)))

(defmacro type? (val t) `(eq? (type ,val) (quote ,t)))

(defn nil? (x) (equal? x nil))
(defn string? (val) (type? val string))
(defn symbol? (val) (type? val symbol))
(defn integer? (val) (type? val integer))
(defn float? (val) (type? val float))
(defn pair? (val) (type? val pair))
(defn error? (val) (type? val error))
(defn bool? (val) (type? val bool))
(defn lambda? (val) (type? val lambda))
(defn macro? (val) (type? val macro))
(defn builtin? (val) (type? val builtin))
(defn specialform? (val) (type? val specialform))
(defn quote? (val) (type? val quote))
(defn env? (val) (type? val env))

(def empty? nil?)

(defn string (v) (repr v))

(defn integer (v) (cond
    ((string? v) (parse-integer v))
    (else (as-integer v))))

(defn float (v) (cond
    ((string? v) (parse-float v))
    (else (as-float v))))

(defn nth (idx lst)
    (if (<= idx 0)
        (car lst)
        (nth (- idx 1) (cdr lst))))

(defn lcons (. items)
    (if (nil? (cdr items))
        (car items)
        (cons (car items) (apply lcons (cdr items)))))

(defn display (x)
    (print (repr x)))

(defn assert-msg (pred reason)
    (if pred () (raise (exception reason))))

(defn assert (pred)
    (assert-msg pred "assertion failed"))

(defmacro deferror (name)
    `(defn ,name (reason) (error (quote ,name) reason)))

(defn apply (op args)
    ((macro ()
        (cons op (map (fn (arg) (list quote arg)) args)))))

(defmacro let (bindings . exprs)
    (if (empty? bindings)
        `((fn () ,@exprs))
        `((fn (,(nth 0 (car bindings)))
            (let ,(cdr bindings) ,@exprs))
        ,(nth 1 (car bindings)))))

(defmacro if (pred then-clause else-clause) ()
    `(cond
        (,pred ,then-clause)
        (else ,else-clause)))

(defn map (f lst)
    (if (nil? lst)
        ()
        (cons
            (f (car lst))
            (map f (cdr lst)))))

(defn foldl (f init lst)
    (if (nil? lst)
        init
        (foldl f (f (car lst) init) (cdr lst))))

(defn foldr (f init lst)
    (if (nil? lst)
        init
        (f (car lst) (foldr f init (cdr lst)))))

(defn in-bounds? (x a b)
    (let ((min (if (< a b) a b))
          (max (if (> a b) a b)))
        (and (<= x max) (>= x min))))

(defn range (start end . step)
    (let ((step (if (empty? step) 1 (car step))))
        (defn range-rec (n)
            (if (in-bounds? n start end)
                (cons n (range-rec (+ n step)))
                ()))
        (range-rec start)))

(defn env-globals ()
    (defn globals-rec (e)
        (let ((pe (env-parent e)))
            (if (nil? pe) e (globals-rec pe))))
    (globals-rec (env)))

(defmacro env-lookup-rec (x . syms)
    (if (empty? syms)
        x
        `(env-lookup-rec (env-lookup ,x (quote ,(car syms))) ,@(cdr syms))))

(defmacro use (mod . names)
    `(begin
        ,@(map
            (fn (name)
                `(defglobal ,name (env-lookup ,mod (quote ,name))))
            names)))

(defmacro import-from (mod . names)
    (import mod as some-module)
    `(let ((some-module ,some-module))
        (use some-module ,@names)))

(defn left-pad (s char n)
    (assert (equal? 1 (len char)))
    (if (< (len s) n)
        (concat
            (apply concat (map
                (fn (_) char)
                (range 0 (- n (len s)))))
            s)
        s))

(defn any (. xs) (foldl or false xs))

(defn all (. xs) (foldl and true xs))

; TODO vectors
(def vector list)

; #(...) -> (vector ...)
(reader-macro!
    (token-match 'char "#")
    (token-match 'char "(")
    (fn (. _) (list
        (token 'char "(")
        (token 'ident 'vector))))

; foo::bar::baz -> (env-lookup-rec foo bar baz)
(defn env-lookup-rec-toks (syms)
    (defn rec (syms) (if (empty? syms)
        (list (token 'char ")"))
        (cons (token 'ident (car syms)) (rec (cdr syms))))) 
    (lcons (token 'char "(") (token 'ident 'env-lookup-rec) (rec syms)))

(reader-macro!
    (token-match 'ident)
    (fn (sym)
        (let ((symv (string (token-value sym))))
            (if (contains? symv "::")
                (env-lookup-rec-toks (split symv "::"))
                (list sym)))))
